var _user$project$Main$subs = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$renderComps = function (comps) {
	return A2(
		_elm_lang$html$Html$table,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			function (comp) {
				return A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], '/comp.html?', comp.id)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(comp.name),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(comp.id),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(comp.date)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					});
			},
			comps));
};
var _user$project$Main$getMatchingComps = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$List$filter,
		function (comp) {
			return A2(
				_elm_lang$core$String$contains,
				_elm_lang$core$String$toLower(_p1.search),
				_elm_lang$core$String$toLower(comp.name));
		},
		_p1.competitions);
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {competitions: a, search: b, error: c};
	});
var _user$project$Main$Search = function (a) {
	return {ctor: 'Search', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Search'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(model.search),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Search),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _user$project$Main$renderComps(
						A2(
							_elm_lang$core$List$sortBy,
							function (comp) {
								return _elm_lang$core$Date$toTime(comp.date);
							},
							_user$project$Main$getMatchingComps(model))),
					_1: {ctor: '[]'}
				}
			},
			function () {
				var _p2 = model.error;
				if (_p2.ctor === 'Just') {
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p2._0),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}()));
};
var _user$project$Main$ParseUpcoming = function (a) {
	return {ctor: 'ParseUpcoming', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'LoadUpcoming':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(
							_elm_lang$http$Http$send,
							_user$project$Main$ParseUpcoming,
							_elm_lang$http$Http$getString('api/upcoming')),
						_1: {ctor: '[]'}
					});
			case 'ParseUpcoming':
				if (_p3._0.ctor === 'Ok') {
					var _p4 = A2(
						_elm_lang$core$Json_Decode$decodeString,
						_elm_lang$core$Json_Decode$list(_user$project$Base$decodeComp),
						_p3._0._0);
					if (_p4.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{competitions: _p4._0}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									error: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Basics$toString(_p4._0))
								}),
							{ctor: '[]'});
					}
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toString(_p3._0._0))
							}),
						{ctor: '[]'});
				}
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{search: _p3._0}),
					{ctor: '[]'});
		}
	});
var _user$project$Main$LoadUpcoming = {ctor: 'LoadUpcoming'};
var _user$project$Main$init = A2(
	_user$project$Main$update,
	_user$project$Main$LoadUpcoming,
	{
		competitions: {ctor: '[]'},
		search: '',
		error: _elm_lang$core$Maybe$Nothing
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subs})();
